{"version":3,"sources":["components/tasks/TaskModal.module.css","components/boards/Board.module.css","components/Column.module.css","components/tasks/Task.module.css","components/boards/BoardTitle.module.css","App.module.css","components/boards/SwitchBoard.module.css","components/UI/GreenButton.module.css","components/UI/BlueButton.module.css","components/UI/EditButton.module.css","components/Kanban.module.css","dal/BoardsProvider.js","components/UI/GreenButton.js","components/UI/BlueButton.js","components/tasks/TaskModal.js","components/UI/EditButton.js","components/tasks/Task.js","components/Column.js","components/boards/BoardTitle.js","components/boards/SwitchBoard.js","components/boards/Board.js","components/Kanban.js","App.js","stores/BoardStore.js","index.js"],"names":["module","exports","BoardsProvider","firebaseConfig","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","auth","signOut","getMyBoards","a","myDoc","doc","db","getCurrentUser","uid","getDoc","snapshot","myBoards","exists","data","setMyBoards","kanban","setDoc","this","app","initializeApp","getFirestore","getAuth","currentUser","GreenButton","props","className","classes","button","onClick","children","BlueButton","TaskModal","useState","taskCtn","title","taskTitle","setTaskTitle","description","taskDescription","setTaskDescription","columns","useSelector","state","array","boards","currentBoardIndex","map","column","index","splice","columnIndex","overlay","modal","label","type","titleInput","value","onChange","event","target","ref","taskNameRef","descriptionInput","taskDescriptionRef","modalTaskBtnsContainer","onSaveTask","onClose","onDeleteTask","dropdown","dropdownContent","targetColumnIndex","onMoveTask","EditButton","Task","showModal","setShowModal","newTaskNameInputRef","useRef","newTaskDescriptionInputRef","dispatch","useDispatch","taskList","task","editBtn","taskIndex","onSaveBoard","position","Column","showTaskModal","setShowTaskModal","editColumn","setEditColumn","columnTitle","setColumnTitle","header","e","preventDefault","length","addTaskBtn","BoardTitle","editBoardTitle","setEdtiBoardTitle","boardTitle","setBoardTitle","useEffect","boardTitleContainer","input","onSaveNewBoardTitle","SwitchBoard","board","newIndex","switchBoard","Board","addingColumn","setAddingColumn","newColumnInputRef","boardId","boardHeader","newTitle","addBtn","addColumnForm","placeholder","addColumnBtns","enteredColumnName","current","Kanban","then","loader","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","useAuthState","user","buttonConteiner","boardStore","createStore","action","newState","push","move","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.d6a3aa1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"TaskModal_modal__Vs10a\",\"overlay\":\"TaskModal_overlay__1iMdN\",\"descriptionInput\":\"TaskModal_descriptionInput__1qkp4\",\"titleInput\":\"TaskModal_titleInput__3li-g\",\"modalTaskBtnsContainer\":\"TaskModal_modalTaskBtnsContainer__1yjJm\",\"label\":\"TaskModal_label__BJNqV\",\"dropdown\":\"TaskModal_dropdown__1oetS\",\"dropdownContent\":\"TaskModal_dropdownContent__2wj6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__8npNI\",\"boardHeader\":\"Board_boardHeader__OjfMz\",\"addBtn\":\"Board_addBtn__XKKvj\",\"addColumnForm\":\"Board_addColumnForm__rnzu6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"Column_column__5bjLn\",\"title\":\"Column_title__2XnMF\",\"addTaskBtn\":\"Column_addTaskBtn__1w9hF\",\"header\":\"Column_header__2JfKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"Task_taskList__3xjK3\",\"task\":\"Task_task__2ZL6s\",\"editBtn\":\"Task_editBtn__2OpVa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardTitleContainer\":\"BoardTitle_boardTitleContainer__3jq4u\",\"boardTitle\":\"BoardTitle_boardTitle__2t--w\",\"input\":\"BoardTitle_input__Tz0D9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonConteiner\":\"App_buttonConteiner__dkKTW\",\"header\":\"App_header__1cavb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"SwitchBoard_dropdown__2e9cN\",\"dropdownContent\":\"SwitchBoard_dropdownContent__2MgK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GreenButton_button__qYWqD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BlueButton_button__3sy6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"EditButton_button__3tJJe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Kanban_loader__3Ob1l\",\"spin\":\"Kanban_spin__2c6gX\"};","import { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, setDoc, doc, getDoc } from \"firebase/firestore\";\r\n\r\nexport class BoardsProvider {\r\n  app;\r\n  db;\r\n  auth;\r\n  currentUser;\r\n\r\n  constructor(firebaseConfig) {\r\n    this.app = initializeApp(firebaseConfig);\r\n    this.db = getFirestore(this.app);\r\n    this.auth = getAuth();\r\n  }\r\n\r\n  signInWithGoogle = () => {\r\n    const provider = new GoogleAuthProvider();\r\n    signInWithPopup(this.auth, provider);\r\n  };\r\n\r\n  signOut = () => {\r\n    this.auth.signOut();\r\n  };\r\n\r\n  getCurrentUser() {\r\n    if (!this.currentUser) {\r\n      this.currentUser = this.auth.currentUser;\r\n    }\r\n    return this.currentUser;\r\n  }\r\n\r\n  getMyBoards = async () => {\r\n    const myDoc = doc(this.db, \"boards\", this.getCurrentUser().uid);\r\n    const snapshot = await getDoc(myDoc);\r\n    const myBoards = snapshot.exists() ? snapshot.data() : null;\r\n    return myBoards;\r\n  };\r\n\r\n  setMyBoards = async (kanban) => {\r\n    const myDoc = doc(this.db, \"boards\", this.getCurrentUser().uid);\r\n    await setDoc(myDoc, kanban);\r\n  };\r\n}\r\n","import classes from \"./GreenButton.module.css\";\r\n\r\nconst GreenButton = (props) => {\r\n  return (\r\n    <button className={classes.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default GreenButton;\r\n","import classes from \"./BlueButton.module.css\";\r\n\r\nconst BlueButton = (props) => {\r\n  return (\r\n    <button className={classes.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport classes from \"./TaskModal.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport BlueButton from \"../UI/BlueButton\";\r\n\r\nconst TaskModal = (props) => {\r\n  const [taskTitle, setTaskTitle] = useState(props.taskCtn.title);\r\n  const [taskDescription, setTaskDescription] = useState(\r\n    props.taskCtn.description\r\n  );\r\n\r\n  const saveAddTask = () => {\r\n    props.onSaveTask(taskTitle, taskDescription);\r\n  };\r\n\r\n  const cancelAddTask = () => {\r\n    props.onClose();\r\n  };\r\n\r\n  const deleteTask = () => {\r\n    props.onDeleteTask();\r\n  };\r\n\r\n  const changeTitle = (event) => {\r\n    setTaskTitle(event.target.value);\r\n  };\r\n\r\n  const changeDescription = (event) => {\r\n    setTaskDescription(event.target.value);\r\n  };\r\n\r\n  const columns = useSelector((state) => {\r\n    let array = state.boards[state.currentBoardIndex].columns.map(\r\n      (column, index) => {\r\n        return { title: column.title, index: index };\r\n      }\r\n    );\r\n    array.splice(props.columnIndex, 1);\r\n    return array;\r\n  });\r\n\r\n  const moveTask = (targetColumnIndex) => {\r\n    props.onMoveTask(taskTitle, taskDescription, targetColumnIndex);\r\n  };\r\n\r\n  return (\r\n    <from>\r\n      <div className={classes.overlay}></div>\r\n      <div className={classes.modal}>\r\n        <label className={classes.label}>Task title</label>\r\n        <input\r\n          type=\"text\"\r\n          className={classes.titleInput}\r\n          value={taskTitle}\r\n          onChange={changeTitle}\r\n          ref={props.taskNameRef}\r\n        ></input>\r\n\r\n        <label className={classes.label}>Task description</label>\r\n        <textarea\r\n          type=\"text\"\r\n          className={classes.descriptionInput}\r\n          value={taskDescription}\r\n          onChange={changeDescription}\r\n          ref={props.taskDescriptionRef}\r\n        ></textarea>\r\n\r\n        <div className={classes.modalTaskBtnsContainer}>\r\n          <BlueButton onClick={saveAddTask}>✔</BlueButton>\r\n          <BlueButton onClick={cancelAddTask}>✖</BlueButton>\r\n          <BlueButton onClick={deleteTask}>Delete</BlueButton>\r\n          <div className={classes.dropdown}>\r\n            <BlueButton>Move to</BlueButton>\r\n            <div className={classes.dropdownContent}>\r\n              {columns.map((column) => (\r\n                <a onClick={() => moveTask(column.index)}>{column.title}</a>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </from>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n","import classes from \"./EditButton.module.css\";\r\n\r\nconst EditButton = (props) => {\r\n  return (\r\n    <button className={classes.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EditButton;\r\n","import { useState, useRef } from \"react\";\r\nimport classes from \"./Task.module.css\";\r\nimport TaskModal from \"./TaskModal\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"array.prototype.move\";\r\nimport EditButton from \"../UI/EditButton\";\r\n\r\nconst Task = (props) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const newTaskNameInputRef = useRef();\r\n  const newTaskDescriptionInputRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const editTask = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const closeTask = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const saveTask = (taskTitle, taskDescription) => {\r\n    dispatch({\r\n      type: \"UPDATE_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n      task: {\r\n        title: taskTitle,\r\n        position: props.task.position,\r\n        description: taskDescription,\r\n      },\r\n    });\r\n    setShowModal(false);\r\n  };\r\n\r\n  const deleteTask = () => {\r\n    dispatch({\r\n      type: \"DELETE_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const moveTask = (taskTitle, taskDescription, targetColumnIndex) => {\r\n    dispatch({\r\n      type: \"MOVE_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n      targetColumnIndex: targetColumnIndex,\r\n      task: {\r\n        title: taskTitle,\r\n        position: props.task.position,\r\n        description: taskDescription,\r\n      },\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const moveTaskUp = () => {\r\n    dispatch({\r\n      type: \"MOVE_TASK_UP\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const moveTaskDown = () => {\r\n    dispatch({\r\n      type: \"MOVE_TASK_DOWN\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.taskList}>\r\n      <h4 className={classes.task}>{props.task.title}</h4>\r\n      <div>\r\n        <button className={classes.editBtn} onClick={moveTaskUp}>\r\n          🡅\r\n        </button>\r\n        <button className={classes.editBtn} onClick={moveTaskDown}>\r\n          🡇\r\n        </button>\r\n        <EditButton onClick={editTask}>🖊</EditButton>\r\n      </div>\r\n\r\n      {showModal && (\r\n        <TaskModal\r\n          taskCtn={props.task}\r\n          onClose={closeTask}\r\n          columnIndex={props.columnIndex}\r\n          onSaveTask={saveTask}\r\n          onDeleteTask={deleteTask}\r\n          onMoveTask={moveTask}\r\n          taskNameRef={newTaskNameInputRef}\r\n          taskDescriptionRef={newTaskDescriptionInputRef}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import { useState } from \"react\";\r\nimport classes from \"./Column.module.css\";\r\nimport Task from \"./tasks/Task\";\r\nimport TaskModal from \"./tasks/TaskModal\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport GreenButton from \"./UI/GreenButton\";\r\nimport EditButton from \"./UI/EditButton\";\r\n\r\nconst Column = (props) => {\r\n  const [showTaskModal, setShowTaskModal] = useState(false);\r\n  const [editColumn, setEditColumn] = useState(false);\r\n  const [columnTitle, setColumnTitle] = useState(props.column.title);\r\n\r\n  const addNewTask = () => {\r\n    setShowTaskModal(true);\r\n  };\r\n\r\n  const modalClose = () => {\r\n    setShowTaskModal(false);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const saveNewTask = (taskTitle, taskDescription) => {\r\n    dispatch({\r\n      type: \"SAVE_NEW_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      task: {\r\n        title: taskTitle,\r\n        position: props.column.taskList.length,\r\n        description: taskDescription,\r\n      },\r\n    });\r\n    setShowTaskModal(false);\r\n  };\r\n\r\n  const editColumnHandler = (e) => {\r\n    e.preventDefault();\r\n    setEditColumn(true);\r\n  };\r\n\r\n  const changeColumnTitle = (event) => {\r\n    setColumnTitle(event.target.value);\r\n  };\r\n\r\n  const saveChangeTitle = () => {\r\n    dispatch({\r\n      type: \"UPDATE_COLUMN\",\r\n      columnIndex: props.columnIndex,\r\n      column: {\r\n        title: columnTitle,\r\n        position: props.column.length,\r\n        taskList: props.column.taskList,\r\n      },\r\n    });\r\n    setEditColumn(false);\r\n  };\r\n\r\n  const cancelChangeTitle = () => {\r\n    setEditColumn(false);\r\n  };\r\n\r\n  const deleteColumn = () => {\r\n    dispatch({\r\n      type: \"DELETE_COLUMN\",\r\n      columnIndex: props.columnIndex,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.column}>\r\n      <div>\r\n        {!editColumn && (\r\n          <div className={classes.header}>\r\n            <h3 className={classes.title}>{props.column.title}</h3>\r\n            <EditButton onClick={editColumnHandler}>🖊</EditButton>\r\n          </div>\r\n        )}\r\n        {editColumn && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={columnTitle}\r\n              onChange={changeColumnTitle}\r\n            ></input>\r\n            <GreenButton onClick={saveChangeTitle}>✔</GreenButton>\r\n            <GreenButton onClick={cancelChangeTitle}>✖</GreenButton>\r\n            <GreenButton onClick={deleteColumn}>Delete</GreenButton>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {props.column.taskList.map((task, index) => (\r\n        <Task\r\n          columnIndex={props.columnIndex}\r\n          taskIndex={index}\r\n          task={task}\r\n          key={task.title}\r\n        />\r\n      ))}\r\n      <button className={classes.addTaskBtn} onClick={addNewTask}>\r\n        + add new task\r\n      </button>\r\n      {showTaskModal && (\r\n        <TaskModal onClose={modalClose} taskCtn={{}} onSaveTask={saveNewTask} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Column;\r\n","import classes from \"./BoardTitle.module.css\";\r\nimport EditButton from \"../UI/EditButton\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GreenButton from \"../UI/GreenButton\";\r\n\r\nconst BoardTitle = (props) => {\r\n  const [editBoardTitle, setEdtiBoardTitle] = useState(false);\r\n  const [boardTitle, setBoardTitle] = useState(props.title);\r\n\r\n  useEffect(() => {\r\n    setBoardTitle(props.title);\r\n  }, [props.title]);\r\n\r\n  const editBoardTitleHandler = () => {\r\n    setEdtiBoardTitle(true);\r\n  };\r\n\r\n  const changeBoardTitle = (event) => {\r\n    setBoardTitle(event.target.value);\r\n  };\r\n  const saveChangeTitle = () => {\r\n    props.onSaveNewBoardTitle(boardTitle);\r\n    setEdtiBoardTitle(false);\r\n  };\r\n  const cancelChangeTitle = () => {\r\n    setEdtiBoardTitle(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {editBoardTitle ? (\r\n        <div className={classes.boardTitleContainer}>\r\n          <input\r\n            className={classes.input}\r\n            type=\"text\"\r\n            value={boardTitle}\r\n            onChange={changeBoardTitle}\r\n          ></input>\r\n          <GreenButton onClick={saveChangeTitle}>✔</GreenButton>\r\n          <GreenButton onClick={cancelChangeTitle}>✖</GreenButton>\r\n          <GreenButton //onClick={deleteColumn}\r\n          >\r\n            Delete\r\n          </GreenButton>\r\n        </div>\r\n      ) : (\r\n        <div className={classes.boardTitleContainer}>\r\n          <h2 className={classes.boardTitle}>{boardTitle}</h2>\r\n          <EditButton onClick={editBoardTitleHandler}>🖊</EditButton>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BoardTitle;\r\n","import GreenButton from \"../UI/GreenButton\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport classes from \"./SwitchBoard.module.css\";\r\n\r\nconst SwitchBoard = (props) => {\r\n  const boards = useSelector((state) => state.boards);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const addNewBoard = () => {\r\n    dispatch({\r\n      type: \"SAVE_NEW_BOARD\",\r\n      board: {\r\n        title: \"New board\",\r\n        columns: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const switchBoard = (index) => {\r\n    dispatch({\r\n      type: \"SWITCH_BOARD\",\r\n      newIndex: index,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dropdown}>\r\n      <GreenButton>Switch board</GreenButton>\r\n      <div className={classes.dropdownContent}>\r\n        {boards.map((board, index) => (\r\n          <a onClick={() => switchBoard(index)}>{board && board.title}</a>\r\n        ))}\r\n        <button onClick={addNewBoard}>+ add new board</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwitchBoard;\r\n","import { useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Column from \"../Column\";\r\nimport classes from \"./Board.module.css\";\r\nimport GreenButton from \"../UI/GreenButton\";\r\nimport BoardTitle from \"./BoardTitle\";\r\nimport SwitchBoard from \"./SwitchBoard\";\r\n\r\nconst Board = (props) => {\r\n  const [addingColumn, setAddingColumn] = useState(false);\r\n  const newColumnInputRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => {\r\n    if (state.boards) return state.boards[props.boardId];\r\n    return null;\r\n  });\r\n\r\n  const onSaveNewBoardTitle = (boardTitle) => {\r\n    dispatch({\r\n      type: \"UPDATE_BOARD_TITLE\",\r\n      newTitle: boardTitle,\r\n    });\r\n  };\r\n\r\n  const addNewColumn = () => {\r\n    setAddingColumn(true);\r\n  };\r\n\r\n  const saveAddColumn = (e) => {\r\n    e.preventDefault();\r\n    const enteredColumnName = newColumnInputRef.current.value;\r\n\r\n    dispatch({\r\n      type: \"SAVE_COLUMN\",\r\n      column: {\r\n        title: enteredColumnName,\r\n        position: 3,\r\n        taskList: [],\r\n      },\r\n    });\r\n\r\n    setAddingColumn(false);\r\n  };\r\n\r\n  const cancelAddColumn = (e) => {\r\n    e.preventDefault();\r\n    setAddingColumn(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.boardHeader}>\r\n        <SwitchBoard />\r\n        <BoardTitle\r\n          title={board.title}\r\n          onSaveNewBoardTitle={onSaveNewBoardTitle}\r\n        />\r\n      </div>\r\n\r\n      <div className={classes.board}>\r\n        {board &&\r\n          board.columns &&\r\n          board.columns.map((column, index) => (\r\n            <Column column={column} columnIndex={index} key={column.position} />\r\n          ))}\r\n        {!addingColumn && (\r\n          <button className={classes.addBtn} onClick={addNewColumn}>\r\n            + add new column\r\n          </button>\r\n        )}\r\n        {addingColumn && (\r\n          <form className={classes.addColumnForm}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"enter column name\"\r\n              ref={newColumnInputRef}\r\n            />\r\n            <GreenButton\r\n              className={classes.addColumnBtns}\r\n              onClick={saveAddColumn}\r\n            >\r\n              ✔\r\n            </GreenButton>\r\n            <GreenButton\r\n              className={classes.addColumnBtns}\r\n              onClick={cancelAddColumn}\r\n            >\r\n              ✖\r\n            </GreenButton>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Board from \"./boards/Board\";\r\nimport classes from \"./Kanban.module.css\";\r\n\r\nconst Kanban = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const boards = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    props.provider.getMyBoards().then((boards) => {\r\n      if (!boards) {\r\n        boards = {\r\n          currentBoardIndex: 0,\r\n          boards: [\r\n            {\r\n              title: \"New board\",\r\n              columns: [],\r\n            },\r\n          ],\r\n        };\r\n      }\r\n      dispatch({ type: \"INIT\", boards: boards });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (boards.boards) {\r\n      props.provider.setMyBoards(boards);\r\n    }\r\n  }, [boards]);\r\n\r\n  return (\r\n    <>\r\n      {boards && boards.boards ? (\r\n        <Board boardId={boards.currentBoardIndex} provider={props.provider} />\r\n      ) : (\r\n        <div className={classes.loader}></div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Kanban;\r\n","import classes from \"./App.module.css\";\nimport { BoardsProvider } from \"./dal/BoardsProvider\";\nimport { useState } from \"react\";\nimport GreenButton from \"./components/UI/GreenButton\";\nimport Kanban from \"./components/Kanban\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDtq-wAg6dzBCQYVI4Wkt3-_5e7qcmvytg\",\n  authDomain: \"kanban-f9914.firebaseapp.com\",\n  projectId: \"kanban-f9914\",\n  storageBucket: \"kanban-f9914.appspot.com\",\n  messagingSenderId: \"273849008084\",\n  appId: \"1:273849008084:web:bd4ccc18e119db93216041\",\n};\n\nconst provider = new BoardsProvider(firebaseConfig);\n\nfunction App() {\n  const [user] = useAuthState(provider.auth);\n\n  const loggingToGoogle = () => {\n    provider.signInWithGoogle();\n  };\n  return (\n    <div>\n      <h1 className={classes.header}>KANBAN</h1>\n      {!user && (\n        <div className={classes.buttonConteiner}>\n          <GreenButton onClick={loggingToGoogle}>\n            Sign in with Google account\n          </GreenButton>\n        </div>\n      )}\n      {user && <Kanban provider={provider} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore } from \"redux\";\r\n\r\nconst boardReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n\r\n  if (action.type === \"INIT\") {\r\n    return action.boards;\r\n  }\r\n\r\n  let board;\r\n\r\n  if (newState.boards) {\r\n    board = newState.boards[newState.currentBoardIndex];\r\n  }\r\n\r\n  if (action.type === \"SAVE_NEW_BOARD\") {\r\n    newState.boards.push(action.board);\r\n    newState.currentBoardIndex = newState.boards.length - 1;\r\n  }\r\n\r\n  if (action.type === \"SWITCH_BOARD\") {\r\n    newState.currentBoardIndex = action.newIndex;\r\n  }\r\n\r\n  if (action.type === \"UPDATE_BOARD_TITLE\") {\r\n    newState.boards[newState.currentBoardIndex].title = action.newTitle;\r\n  }\r\n\r\n  if (action.type === \"SAVE_NEW_TASK\") {\r\n    board.columns[action.columnIndex].taskList.push(action.task);\r\n  }\r\n  if (action.type === \"UPDATE_TASK\") {\r\n    board.columns[action.columnIndex].taskList.splice(\r\n      action.taskIndex,\r\n      1,\r\n      action.task\r\n    );\r\n  }\r\n  if (action.type === \"MOVE_TASK\") {\r\n    board.columns[action.columnIndex].taskList.splice(action.taskIndex, 1);\r\n    board.columns[action.targetColumnIndex].taskList.push(action.task);\r\n  }\r\n  if (action.type === \"MOVE_TASK_UP\") {\r\n    if (action.taskIndex > 0) {\r\n      board.columns[action.columnIndex].taskList.move(\r\n        action.taskIndex,\r\n        action.taskIndex - 1\r\n      );\r\n    }\r\n  }\r\n  if (action.type === \"MOVE_TASK_DOWN\") {\r\n    if (\r\n      action.taskIndex <\r\n      board.columns[action.columnIndex].taskList.length - 1\r\n    ) {\r\n      board.columns[action.columnIndex].taskList.move(\r\n        action.taskIndex,\r\n        action.taskIndex + 1\r\n      );\r\n    }\r\n  }\r\n\r\n  if (action.type === \"DELETE_TASK\") {\r\n    board.columns[action.columnIndex].taskList.splice(action.taskIndex, 1);\r\n  }\r\n  if (action.type === \"SAVE_COLUMN\") {\r\n    board.columns.push(action.column);\r\n  }\r\n  if (action.type === \"UPDATE_COLUMN\") {\r\n    board.columns.splice(action.columnIndex, 1, action.column);\r\n  }\r\n  if (action.type === \"DELETE_COLUMN\") {\r\n    board.columns.splice(action.columnIndex, 1);\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nconst boardStore = createStore(boardReducer);\r\n\r\nexport default boardStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport boardStore from \"./stores/BoardStore\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={boardStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}