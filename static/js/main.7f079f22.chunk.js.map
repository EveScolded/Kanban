{"version":3,"sources":["components/tasks/TaskModal.module.css","components/boards/Board.module.css","components/Column.module.css","components/tasks/Task.module.css","components/boards/BoardTitle.module.css","App.module.css","components/boards/SwitchBoard.module.css","components/UI/GreenButton.module.css","components/UI/BlueButton.module.css","components/UI/EditButton.module.css","components/Kanban.module.css","dal/MockBoardProvider.js","components/UI/GreenButton.js","components/UI/BlueButton.js","components/tasks/TaskModal.js","components/UI/EditButton.js","components/tasks/Task.js","components/Column.js","components/boards/BoardTitle.js","components/boards/SwitchBoard.js","components/boards/Board.js","components/Kanban.js","App.js","stores/BoardStore.js","index.js"],"names":["module","exports","MockBoardProvider","mockBoards","currentBoardIndex","boards","title","columns","position","taskList","description","Promise","resolve","setTimeout","board","localStorage","setItem","JSON","stringify","GreenButton","props","className","classes","button","onClick","children","BlueButton","TaskModal","useState","taskCtn","taskTitle","setTaskTitle","taskDescription","setTaskDescription","useSelector","state","array","map","column","index","splice","columnIndex","overlay","modal","label","type","titleInput","value","onChange","event","target","ref","taskNameRef","descriptionInput","taskDescriptionRef","modalTaskBtnsContainer","onSaveTask","onClose","onDeleteTask","dropdown","dropdownContent","targetColumnIndex","onMoveTask","EditButton","Task","showModal","setShowModal","newTaskNameInputRef","useRef","newTaskDescriptionInputRef","dispatch","useDispatch","task","editBtn","taskIndex","onSaveBoard","Column","showTaskModal","setShowTaskModal","editColumn","setEditColumn","columnTitle","setColumnTitle","header","e","preventDefault","length","addTaskBtn","BoardTitle","editBoardTitle","setEdtiBoardTitle","boardTitle","setBoardTitle","useEffect","boardTitleContainer","input","onSaveNewBoardTitle","SwitchBoard","newIndex","switchBoard","Board","addingColumn","setAddingColumn","newColumnInputRef","boardId","saveBoardToStorage","provider","saveBoard","boardHeader","newTitle","addBtn","addColumnForm","placeholder","addColumnBtns","enteredColumnName","current","Kanban","getMyBoards","then","loader","App","logIn","setLogIn","buttonConteiner","boardStore","createStore","action","newState","push","move","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.7f079f22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"TaskModal_modal__Vs10a\",\"overlay\":\"TaskModal_overlay__1iMdN\",\"descriptionInput\":\"TaskModal_descriptionInput__1qkp4\",\"titleInput\":\"TaskModal_titleInput__3li-g\",\"modalTaskBtnsContainer\":\"TaskModal_modalTaskBtnsContainer__1yjJm\",\"label\":\"TaskModal_label__BJNqV\",\"dropdown\":\"TaskModal_dropdown__1oetS\",\"dropdownContent\":\"TaskModal_dropdownContent__2wj6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__8npNI\",\"boardHeader\":\"Board_boardHeader__OjfMz\",\"addBtn\":\"Board_addBtn__XKKvj\",\"addColumnForm\":\"Board_addColumnForm__rnzu6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"Column_column__5bjLn\",\"title\":\"Column_title__2XnMF\",\"addTaskBtn\":\"Column_addTaskBtn__1w9hF\",\"header\":\"Column_header__2JfKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"Task_taskList__3xjK3\",\"task\":\"Task_task__2ZL6s\",\"editBtn\":\"Task_editBtn__2OpVa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardTitleContainer\":\"BoardTitle_boardTitleContainer__3jq4u\",\"boardTitle\":\"BoardTitle_boardTitle__2t--w\",\"input\":\"BoardTitle_input__Tz0D9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonConteiner\":\"App_buttonConteiner__dkKTW\",\"header\":\"App_header__1cavb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"SwitchBoard_dropdown__2e9cN\",\"dropdownContent\":\"SwitchBoard_dropdownContent__2MgK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GreenButton_button__qYWqD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BlueButton_button__3sy6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"EditButton_button__3tJJe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Kanban_loader__3Ob1l\",\"spin\":\"Kanban_spin__2c6gX\"};","export default class MockBoardProvider {\r\n  mockBoards = {\r\n    currentBoardIndex: 0,\r\n    boards: [\r\n      {\r\n        title: \"Quite important project\",\r\n        columns: [\r\n          {\r\n            title: \"TO DO\",\r\n            position: 1,\r\n            taskList: [\r\n              { title: \"task1\", position: 1, description: \"hahahaha\" },\r\n              { title: \"task2\", position: 2, description: \"hehehehe\" },\r\n            ],\r\n          },\r\n          {\r\n            title: \"DOING\",\r\n            position: 2,\r\n            taskList: [\r\n              { title: \"task1\", position: 1, description: \"hahahaha\" },\r\n              { title: \"task2\", position: 2, description: \"hehehehe\" },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  getMyBoards() {\r\n    return new Promise((resolve) => {\r\n      // const myBoard = localStorage.getItem(\"board\");\r\n      // if (myBoard) {\r\n      //   resolve(myBoard);\r\n      // } else {\r\n      setTimeout(() => {\r\n        resolve(this.mockBoards);\r\n      }, 300);\r\n      // }\r\n    });\r\n  }\r\n\r\n  saveBoard(board) {\r\n    localStorage.setItem(\"board\", JSON.stringify(board));\r\n  }\r\n}\r\n","import classes from \"./GreenButton.module.css\";\r\n\r\nconst GreenButton = (props) => {\r\n  return (\r\n    <button className={classes.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default GreenButton;\r\n","import classes from \"./BlueButton.module.css\";\r\n\r\nconst BlueButton = (props) => {\r\n  return (\r\n    <button className={classes.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport classes from \"./TaskModal.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport BlueButton from \"../UI/BlueButton\";\r\n\r\nconst TaskModal = (props) => {\r\n  const [taskTitle, setTaskTitle] = useState(props.taskCtn.title);\r\n  const [taskDescription, setTaskDescription] = useState(\r\n    props.taskCtn.description\r\n  );\r\n\r\n  const saveAddTask = () => {\r\n    props.onSaveTask(taskTitle, taskDescription);\r\n  };\r\n\r\n  const cancelAddTask = () => {\r\n    props.onClose();\r\n  };\r\n\r\n  const deleteTask = () => {\r\n    props.onDeleteTask();\r\n  };\r\n\r\n  const changeTitle = (event) => {\r\n    setTaskTitle(event.target.value);\r\n  };\r\n\r\n  const changeDescription = (event) => {\r\n    setTaskDescription(event.target.value);\r\n  };\r\n\r\n  const columns = useSelector((state) => {\r\n    let array = state.boards[state.currentBoardIndex].columns.map(\r\n      (column, index) => {\r\n        return { title: column.title, index: index };\r\n      }\r\n    );\r\n    array.splice(props.columnIndex, 1);\r\n    return array;\r\n  });\r\n\r\n  const moveTask = (targetColumnIndex) => {\r\n    props.onMoveTask(taskTitle, taskDescription, targetColumnIndex);\r\n  };\r\n\r\n  return (\r\n    <from>\r\n      <div className={classes.overlay}></div>\r\n      <div className={classes.modal}>\r\n        <label className={classes.label}>Task title</label>\r\n        <input\r\n          type=\"text\"\r\n          className={classes.titleInput}\r\n          value={taskTitle}\r\n          onChange={changeTitle}\r\n          ref={props.taskNameRef}\r\n        ></input>\r\n\r\n        <label className={classes.label}>Task description</label>\r\n        <textarea\r\n          type=\"text\"\r\n          className={classes.descriptionInput}\r\n          value={taskDescription}\r\n          onChange={changeDescription}\r\n          ref={props.taskDescriptionRef}\r\n        ></textarea>\r\n\r\n        <div className={classes.modalTaskBtnsContainer}>\r\n          <BlueButton onClick={saveAddTask}>✔</BlueButton>\r\n          <BlueButton onClick={cancelAddTask}>✖</BlueButton>\r\n          <BlueButton onClick={deleteTask}>Delete</BlueButton>\r\n          <div className={classes.dropdown}>\r\n            <BlueButton>Move to</BlueButton>\r\n            <div className={classes.dropdownContent}>\r\n              {columns.map((column) => (\r\n                <a onClick={() => moveTask(column.index)}>{column.title}</a>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </from>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n","import classes from \"./EditButton.module.css\";\r\n\r\nconst EditButton = (props) => {\r\n  return (\r\n    <button className={classes.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EditButton;\r\n","import { useState, useRef } from \"react\";\r\nimport classes from \"./Task.module.css\";\r\nimport TaskModal from \"./TaskModal\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"array.prototype.move\";\r\nimport EditButton from \"../UI/EditButton\";\r\n\r\nconst Task = (props) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const newTaskNameInputRef = useRef();\r\n  const newTaskDescriptionInputRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const editTask = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const closeTask = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const saveTask = (taskTitle, taskDescription) => {\r\n    dispatch({\r\n      type: \"UPDATE_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n      task: {\r\n        title: taskTitle,\r\n        position: props.task.position,\r\n        description: taskDescription,\r\n      },\r\n    });\r\n    setShowModal(false);\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const deleteTask = () => {\r\n    dispatch({\r\n      type: \"DELETE_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const moveTask = (taskTitle, taskDescription, targetColumnIndex) => {\r\n    dispatch({\r\n      type: \"MOVE_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n      targetColumnIndex: targetColumnIndex,\r\n      task: {\r\n        title: taskTitle,\r\n        position: props.task.position,\r\n        description: taskDescription,\r\n      },\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const moveTaskUp = () => {\r\n    dispatch({\r\n      type: \"MOVE_TASK_UP\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const moveTaskDown = () => {\r\n    dispatch({\r\n      type: \"MOVE_TASK_DOWN\",\r\n      columnIndex: props.columnIndex,\r\n      taskIndex: props.taskIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.taskList}>\r\n      <h4 className={classes.task}>{props.task.title}</h4>\r\n      <div>\r\n        <button className={classes.editBtn} onClick={moveTaskUp}>\r\n          🡅\r\n        </button>\r\n        <button className={classes.editBtn} onClick={moveTaskDown}>\r\n          🡇\r\n        </button>\r\n        <EditButton onClick={editTask}>🖊</EditButton>\r\n      </div>\r\n\r\n      {showModal && (\r\n        <TaskModal\r\n          taskCtn={props.task}\r\n          onClose={closeTask}\r\n          columnIndex={props.columnIndex}\r\n          onSaveTask={saveTask}\r\n          onDeleteTask={deleteTask}\r\n          onMoveTask={moveTask}\r\n          taskNameRef={newTaskNameInputRef}\r\n          taskDescriptionRef={newTaskDescriptionInputRef}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import { useState } from \"react\";\r\nimport classes from \"./Column.module.css\";\r\nimport Task from \"./tasks/Task\";\r\nimport TaskModal from \"./tasks/TaskModal\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport GreenButton from \"./UI/GreenButton\";\r\nimport EditButton from \"./UI/EditButton\";\r\n\r\nconst Column = (props) => {\r\n  const [showTaskModal, setShowTaskModal] = useState(false);\r\n  const [editColumn, setEditColumn] = useState(false);\r\n  const [columnTitle, setColumnTitle] = useState(props.column.title);\r\n\r\n  const addNewTask = () => {\r\n    setShowTaskModal(true);\r\n  };\r\n\r\n  const modalClose = () => {\r\n    setShowTaskModal(false);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const saveNewTask = (taskTitle, taskDescription) => {\r\n    dispatch({\r\n      type: \"SAVE_NEW_TASK\",\r\n      columnIndex: props.columnIndex,\r\n      task: {\r\n        title: taskTitle,\r\n        position: props.column.taskList.length,\r\n        description: taskDescription,\r\n      },\r\n    });\r\n    setShowTaskModal(false);\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const editColumnHandler = (e) => {\r\n    e.preventDefault();\r\n    setEditColumn(true);\r\n  };\r\n\r\n  const changeColumnTitle = (event) => {\r\n    setColumnTitle(event.target.value);\r\n  };\r\n\r\n  const saveChangeTitle = () => {\r\n    dispatch({\r\n      type: \"UPDATE_COLUMN\",\r\n      columnIndex: props.columnIndex,\r\n      column: {\r\n        title: columnTitle,\r\n        position: props.column.length,\r\n        taskList: props.column.taskList,\r\n      },\r\n    });\r\n    setEditColumn(false);\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  const cancelChangeTitle = () => {\r\n    setEditColumn(false);\r\n  };\r\n\r\n  const deleteColumn = () => {\r\n    dispatch({\r\n      type: \"DELETE_COLUMN\",\r\n      columnIndex: props.columnIndex,\r\n    });\r\n    props.onSaveBoard();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.column}>\r\n      <div>\r\n        {!editColumn && (\r\n          <div className={classes.header}>\r\n            <h3 className={classes.title}>{props.column.title}</h3>\r\n            <EditButton onClick={editColumnHandler}>🖊</EditButton>\r\n          </div>\r\n        )}\r\n        {editColumn && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={columnTitle}\r\n              onChange={changeColumnTitle}\r\n            ></input>\r\n            <GreenButton onClick={saveChangeTitle}>✔</GreenButton>\r\n            <GreenButton onClick={cancelChangeTitle}>✖</GreenButton>\r\n            <GreenButton onClick={deleteColumn}>Delete</GreenButton>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {props.column.taskList.map((task, index) => (\r\n        <Task\r\n          columnIndex={props.columnIndex}\r\n          taskIndex={index}\r\n          onSaveBoard={props.onSaveBoard}\r\n          task={task}\r\n          key={task.title}\r\n        />\r\n      ))}\r\n      <button className={classes.addTaskBtn} onClick={addNewTask}>\r\n        + add new task\r\n      </button>\r\n      {showTaskModal && (\r\n        <TaskModal onClose={modalClose} taskCtn={{}} onSaveTask={saveNewTask} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Column;\r\n","import classes from \"./BoardTitle.module.css\";\r\nimport EditButton from \"../UI/EditButton\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GreenButton from \"../UI/GreenButton\";\r\n\r\nconst BoardTitle = (props) => {\r\n  const [editBoardTitle, setEdtiBoardTitle] = useState(false);\r\n  const [boardTitle, setBoardTitle] = useState(props.title);\r\n\r\n  useEffect(() => {\r\n    setBoardTitle(props.title);\r\n  }, [props.title]);\r\n\r\n  const editBoardTitleHandler = () => {\r\n    setEdtiBoardTitle(true);\r\n  };\r\n\r\n  const changeBoardTitle = (event) => {\r\n    setBoardTitle(event.target.value);\r\n  };\r\n  const saveChangeTitle = () => {\r\n    props.onSaveNewBoardTitle(boardTitle);\r\n    setEdtiBoardTitle(false);\r\n  };\r\n  const cancelChangeTitle = () => {\r\n    setEdtiBoardTitle(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {editBoardTitle ? (\r\n        <div className={classes.boardTitleContainer}>\r\n          <input\r\n            className={classes.input}\r\n            type=\"text\"\r\n            value={boardTitle}\r\n            onChange={changeBoardTitle}\r\n          ></input>\r\n          <GreenButton onClick={saveChangeTitle}>✔</GreenButton>\r\n          <GreenButton onClick={cancelChangeTitle}>✖</GreenButton>\r\n          <GreenButton //onClick={deleteColumn}\r\n          >\r\n            Delete\r\n          </GreenButton>\r\n        </div>\r\n      ) : (\r\n        <div className={classes.boardTitleContainer}>\r\n          <h2 className={classes.boardTitle}>{boardTitle}</h2>\r\n          <EditButton onClick={editBoardTitleHandler}>🖊</EditButton>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BoardTitle;\r\n","import GreenButton from \"../UI/GreenButton\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport classes from \"./SwitchBoard.module.css\";\r\n\r\nconst SwitchBoard = (props) => {\r\n  const boards = useSelector((state) => state.boards);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const addNewBoard = () => {\r\n    dispatch({\r\n      type: \"SAVE_NEW_BOARD\",\r\n      board: {\r\n        title: \"New board\",\r\n        columns: [],\r\n      },\r\n    });\r\n    //props.saveBoardToStorage();\r\n  };\r\n\r\n  const switchBoard = (index) => {\r\n    dispatch({\r\n      type: \"SWITCH_BOARD\",\r\n      newIndex: index,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dropdown}>\r\n      <GreenButton>Switch board</GreenButton>\r\n      <div className={classes.dropdownContent}>\r\n        {boards.map((board, index) => (\r\n          <a onClick={() => switchBoard(index)}>{board && board.title}</a>\r\n        ))}\r\n        <button onClick={addNewBoard}>+ add new board</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwitchBoard;\r\n","import { useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Column from \"../Column\";\r\nimport classes from \"./Board.module.css\";\r\nimport GreenButton from \"../UI/GreenButton\";\r\nimport BoardTitle from \"./BoardTitle\";\r\nimport SwitchBoard from \"./SwitchBoard\";\r\n\r\nconst Board = (props) => {\r\n  const [addingColumn, setAddingColumn] = useState(false);\r\n  const newColumnInputRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => {\r\n    if (state.boards) return state.boards[props.boardId];\r\n    return null;\r\n  });\r\n\r\n  const onSaveNewBoardTitle = (boardTitle) => {\r\n    dispatch({\r\n      type: \"UPDATE_BOARD_TITLE\",\r\n      newTitle: boardTitle,\r\n    });\r\n  };\r\n\r\n  const addNewColumn = () => {\r\n    setAddingColumn(true);\r\n  };\r\n\r\n  const saveAddColumn = (e) => {\r\n    e.preventDefault();\r\n    const enteredColumnName = newColumnInputRef.current.value;\r\n\r\n    dispatch({\r\n      type: \"SAVE_COLUMN\",\r\n      column: {\r\n        title: enteredColumnName,\r\n        position: 3,\r\n        taskList: [],\r\n      },\r\n    });\r\n\r\n    setAddingColumn(false);\r\n    saveBoardToStorage();\r\n  };\r\n\r\n  const saveBoardToStorage = () => {\r\n    props.provider.saveBoard(board);\r\n  };\r\n\r\n  const cancelAddColumn = (e) => {\r\n    e.preventDefault();\r\n    setAddingColumn(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.boardHeader}>\r\n        <SwitchBoard saveBoardToStorage={saveBoardToStorage} />\r\n        <BoardTitle\r\n          title={board.title}\r\n          onSaveNewBoardTitle={onSaveNewBoardTitle}\r\n        />\r\n      </div>\r\n\r\n      <div className={classes.board}>\r\n        {board &&\r\n          board.columns &&\r\n          board.columns.map((column, index) => (\r\n            <Column\r\n              column={column}\r\n              onSaveBoard={saveBoardToStorage}\r\n              columnIndex={index}\r\n              key={column.position}\r\n            />\r\n          ))}\r\n        {!addingColumn && (\r\n          <button className={classes.addBtn} onClick={addNewColumn}>\r\n            + add new column\r\n          </button>\r\n        )}\r\n        {addingColumn && (\r\n          <form className={classes.addColumnForm}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"enter column name\"\r\n              ref={newColumnInputRef}\r\n            />\r\n            <GreenButton\r\n              className={classes.addColumnBtns}\r\n              onClick={saveAddColumn}\r\n            >\r\n              ✔\r\n            </GreenButton>\r\n            <GreenButton\r\n              className={classes.addColumnBtns}\r\n              onClick={cancelAddColumn}\r\n            >\r\n              ✖\r\n            </GreenButton>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Board from \"./boards/Board\";\r\nimport classes from \"./Kanban.module.css\";\r\n\r\nconst Kanban = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const boards = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    props.provider.getMyBoards().then((boards) => {\r\n      dispatch({ type: \"INIT\", boards: boards });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {boards && boards.boards ? (\r\n        <Board boardId={boards.currentBoardIndex} provider={props.provider} />\r\n      ) : (\r\n        <div className={classes.loader}></div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Kanban;\r\n","import classes from \"./App.module.css\";\nimport MockBoardProvider from \"./dal/MockBoardProvider\";\nimport { useState } from \"react\";\nimport GreenButton from \"./components/UI/GreenButton\";\nimport Kanban from \"./components/Kanban\";\n\nconst provider = new MockBoardProvider();\n\nfunction App() {\n  const [logIn, setLogIn] = useState(false);\n\n  const loggingToGoogle = () => {\n    setLogIn(true);\n  };\n  return (\n    <div>\n      <h1 className={classes.header}>KANBAN</h1>\n      {!logIn && (\n        <div className={classes.buttonConteiner}>\n          <GreenButton onClick={loggingToGoogle}>\n            Sign in with Google account\n          </GreenButton>\n        </div>\n      )}\n      {logIn && <Kanban provider={provider} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore } from \"redux\";\r\n\r\nconst boardReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n\r\n  if (action.type === \"INIT\") {\r\n    return action.boards;\r\n  }\r\n\r\n  let board;\r\n\r\n  if (newState.boards) {\r\n    board = newState.boards[newState.currentBoardIndex];\r\n  }\r\n\r\n  if (action.type === \"SAVE_NEW_BOARD\") {\r\n    newState.boards.push(action.board);\r\n    newState.currentBoardIndex = newState.boards.length - 1;\r\n  }\r\n\r\n  if (action.type === \"SWITCH_BOARD\") {\r\n    newState.currentBoardIndex = action.newIndex;\r\n  }\r\n\r\n  if (action.type === \"UPDATE_BOARD_TITLE\") {\r\n    newState.boards[newState.currentBoardIndex].title = action.newTitle;\r\n  }\r\n\r\n  if (action.type === \"SAVE_NEW_TASK\") {\r\n    board.columns[action.columnIndex].taskList.push(action.task);\r\n  }\r\n  if (action.type === \"UPDATE_TASK\") {\r\n    board.columns[action.columnIndex].taskList.splice(\r\n      action.taskIndex,\r\n      1,\r\n      action.task\r\n    );\r\n  }\r\n  if (action.type === \"MOVE_TASK\") {\r\n    board.columns[action.columnIndex].taskList.splice(action.taskIndex, 1);\r\n    board.columns[action.targetColumnIndex].taskList.push(action.task);\r\n  }\r\n  if (action.type === \"MOVE_TASK_UP\") {\r\n    if (action.taskIndex > 0) {\r\n      board.columns[action.columnIndex].taskList.move(\r\n        action.taskIndex,\r\n        action.taskIndex - 1\r\n      );\r\n    }\r\n  }\r\n  if (action.type === \"MOVE_TASK_DOWN\") {\r\n    if (\r\n      action.taskIndex <\r\n      board.columns[action.columnIndex].taskList.length - 1\r\n    ) {\r\n      board.columns[action.columnIndex].taskList.move(\r\n        action.taskIndex,\r\n        action.taskIndex + 1\r\n      );\r\n    }\r\n  }\r\n\r\n  if (action.type === \"DELETE_TASK\") {\r\n    board.columns[action.columnIndex].taskList.splice(action.taskIndex, 1);\r\n  }\r\n  if (action.type === \"SAVE_COLUMN\") {\r\n    board.columns.push(action.column);\r\n  }\r\n  if (action.type === \"UPDATE_COLUMN\") {\r\n    board.columns.splice(action.columnIndex, 1, action.column);\r\n  }\r\n  if (action.type === \"DELETE_COLUMN\") {\r\n    board.columns.splice(action.columnIndex, 1);\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nconst boardStore = createStore(boardReducer);\r\n\r\nexport default boardStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport boardStore from \"./stores/BoardStore\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={boardStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}